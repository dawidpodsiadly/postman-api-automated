{
	"info": {
		"_postman_id": "3e5ddf51-7150-4185-a481-810d47ba671b",
		"name": "final api tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20702890"
	},
	"item": [
		{
			"name": "Setup",
			"item": [
				{
					"name": "Create Admin Auth Token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const resBody = pm.response.json();",
									"pm.collectionVariables.set(\"adminAuthToken\", \"Bearer \" + resBody.token);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{apiTesterAdmin}}\",\n    \"password\": \"{{password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Not Admin Auth Token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const resBody = pm.response.json();",
									"pm.collectionVariables.set(\"notAdminAuthToken\", \"Bearer \" + resBody.token);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{apiTesterNotAdmin}}\",\n    \"password\": \"{{password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "/auth",
			"item": [
				{
					"name": "GET /auth",
					"item": [
						{
							"name": "Should return 401 when Invalid Token - GET /auth",
							"item": [
								{
									"name": "Should return 401 when Invalid Token - GET /auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return 401 when Invalid Token - GET /auth\", function () {",
													"    const resBody = pm.response.json();",
													"    pm.response.to.have.status(401);",
													"    pm.expect(resBody.message).to.eql('Invalid token');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{invalidAuthToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/auth",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Should return 200 and Token when Valid Token - GET /auth",
							"item": [
								{
									"name": "Should return 200 and Token when Valid Token - GET /auth",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return 200 and Token when Valid Token - GET /auth\", function () {",
													"    const resBody = pm.response.json();",
													"    pm.response.to.have.status(200);",
													"    pm.expect(resBody.message).to.eql('Valid token');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/auth",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Should return 401 when Token Not Provided - GET /auth",
							"item": [
								{
									"name": "Should return 401 when Token Not Provided - GET /auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return 401 when Token Not Provided - GET /auth\", function () {",
													"    const resBody = pm.response.json();",
													"    pm.response.to.have.status(401);",
													"    pm.expect(resBody.message).to.eql('Token not provided or is wrong');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/auth",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "POST /auth",
					"item": [
						{
							"name": "Should return 401 when Invalid Credentials - POST /auth",
							"item": [
								{
									"name": "Should return 401 when Invalid Credentials - POST /auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return 401 when Invalid Credentials - POST /auth\", function () {",
													"    const resBody = pm.response.json();",
													"    pm.response.to.have.status(401);",
													"    pm.expect(resBody.message).to.eql('Invalid email or password');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"{{apiTesterNotExisting}}\", \n    \"password\": \"{{password}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/auth",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Should return 200 and Token when Valid Credentials - POST /auth",
							"item": [
								{
									"name": "Should return 200 and Token when Valid Credentials - POST /auth",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return 200 and Token when Valid Credentials - POST /auth\", function () {",
													"    const resBody = pm.response.json();",
													"    pm.response.to.have.status(200);",
													"    pm.expect(resBody).to.have.property(\"token\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"{{apiTesterAdmin}}\",\n    \"password\": \"{{password}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/auth",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Should return 401 when no Auth  - POST /auth",
							"item": [
								{
									"name": "Should return 401 when no Auth  - POST /auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return 401 when no Auth  - POST /auth\", function () {",
													"    const resBody = pm.response.json();",
													"    pm.response.to.have.status(401);",
													"    pm.expect(resBody.message).to.eql('Invalid email or password');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{baseUrl}}/auth",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Should return 403 when User is Deactivated - POST /auth",
							"item": [
								{
									"name": "Should return 403 when User is Deactivated - POST /auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return 403 when User is Deactivated - POST /auth\", function () {",
													"    const resBody = pm.response.json();",
													"    pm.response.to.have.status(403);",
													"    pm.expect(resBody.message).to.eql('Account is not activated');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"{{apiTesterDeactivated}}\", \n    \"password\": \"{{password}}\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/auth",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "/users",
			"item": [
				{
					"name": "Setup",
					"item": [
						{
							"name": "Generate random User Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const randId = Math.floor(Math.random() * 900000000) + 100000000;",
											" ",
											"const userName = \"user_\" + randId;",
											"const userSurname = \"surname_\" + randId;",
											"const userEmail = \"email_\" + randId + \"@postman.com\";",
											"const userPassword = \"pass_\" + randId;",
											"const userPhoneNumber = String(randId);",
											"const userNotes  = \"notes \" + randId;",
											"",
											"const userBirthDate = `${1960 + Math.floor(Math.random() * 46)}-${String(1 + Math.floor(Math.random() * 12)).padStart(2, \"0\")}-${String(1 + Math.floor(Math.random() * 28)).padStart(2, \"0\")}`;",
											"",
											"const contractTypes = ['Mandate', 'Employment', 'B2B'];",
											"const userContractType = contractTypes[Math.floor(Math.random() * contractTypes.length)];",
											"",
											"const positions = ['Storekeeper', 'Accountant', 'IT'];",
											"const userPosition = positions[Math.floor(Math.random() * positions.length)];",
											"",
											"const userSalary = Math.floor(30000 + Math.random() * 120000);",
											"const startYear = 2020 + Math.floor(Math.random() * 5);",
											"const userStartTime = `${startYear}-${String(1 + Math.floor(Math.random() * 12)).padStart(2, \"0\")}-${String(1 + Math.floor(Math.random() * 28)).padStart(2, \"0\")}`;",
											"const userEndTime = `${startYear + 1 + Math.floor(Math.random() * 5)}-${userStartTime.split(\"-\")[1]}-${userStartTime.split(\"-\")[2]}`;",
											"",
											"const userIsAdmin = Math.random() < 0.5;",
											"const userIsActivated = Math.random() < 0.5;",
											"",
											"pm.collectionVariables.set(\"userName\", userName);",
											"pm.collectionVariables.set(\"userSurname\", userSurname);",
											"pm.collectionVariables.set(\"userEmail\", userEmail);",
											"pm.collectionVariables.set(\"userPassword\", userPassword);",
											"pm.collectionVariables.set(\"userNotes\", userNotes);",
											"pm.collectionVariables.set(\"userPhoneNumber\", userPhoneNumber);",
											"pm.collectionVariables.set(\"userBirthDate\", userBirthDate);",
											"pm.collectionVariables.set(\"userContractType\", userContractType);",
											"pm.collectionVariables.set(\"userPosition\", userPosition);",
											"pm.collectionVariables.set(\"userSalary\", userSalary);",
											"pm.collectionVariables.set(\"userStartTime\", userStartTime);",
											"pm.collectionVariables.set(\"userEndTime\", userEndTime);",
											"pm.collectionVariables.set(\"userIsAdmin\", userIsAdmin);",
											"pm.collectionVariables.set(\"userIsActivated\", userIsActivated);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{adminAuthToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET /users",
					"item": [
						{
							"name": "Should return 200 and Contain User IDs as Admin User - GET /users",
							"item": [
								{
									"name": "Create First Test User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const resBody = pm.response.json();",
													"pm.collectionVariables.set(\"firstUserId\", resBody.id);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randId = Math.floor(Math.random() * 900000000) + 100000000;",
													"const userEmail = \"email_\" + randId + \"@postman.com\";",
													"pm.collectionVariables.set(\"userEmail\", userEmail);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{userName}}\",\n  \"surname\": \"{{userSurname}}\",\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{userPassword}}\",\n  \"phoneNumber\": \"{{userPhoneNumber}}\",\n  \"birthDate\": \"{{userBirthDate}}\",\n  \"contract\": {\n    \"type\": \"{{userContractType}}\",\n    \"salary\": \"{{userSalary}}\",\n    \"position\": \"{{userPosition}}\",\n    \"startTime\": \"{{userStartTime}}\",\n    \"endTime\": \"{{userEndTime}}\"\n  },\n  \"notes\": \"{{userNotes}}\",\n  \"isAdmin\": \"{{userIsAdmin}}\",\n  \"isActivated\": \"{{userIsActivated}}\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Second Test User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const resBody = pm.response.json();",
													"pm.collectionVariables.set(\"secondUserId\", resBody.id);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randId = Math.floor(Math.random() * 900000000) + 100000000;",
													"const userEmail = \"email_\" + randId + \"@postman.com\";",
													"pm.collectionVariables.set(\"userEmail\", userEmail);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{userName}}\",\n  \"surname\": \"{{userSurname}}\",\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{userPassword}}\",\n  \"phoneNumber\": \"{{userPhoneNumber}}\",\n  \"birthDate\": \"{{userBirthDate}}\",\n  \"contract\": {\n    \"type\": \"{{userContractType}}\",\n    \"salary\": \"{{userSalary}}\",\n    \"position\": \"{{userPosition}}\",\n    \"startTime\": \"{{userStartTime}}\",\n    \"endTime\": \"{{userEndTime}}\"\n  },\n  \"notes\": \"{{userNotes}}\",\n  \"isAdmin\": \"{{userIsAdmin}}\",\n  \"isActivated\": \"{{userIsActivated}}\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Should return 200 and Contain User IDs as Admin User - GET /users",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return 200 and Contain User IDs as Admin User - GET /users\", function () {",
													"    const resBody = pm.response.json();",
													"    const firstUserId = pm.collectionVariables.get(\"firstUserId\")",
													"    const secondUserId = pm.collectionVariables.get(\"secondUserId\")",
													"",
													"    pm.response.to.have.status(200);",
													"    pm.expect(resBody).to.be.an(\"array\");",
													"",
													"    const userIds = resBody.map((user) => user._id);",
													"    pm.expect(userIds).to.include(firstUserId);",
													"    pm.expect(userIds).to.include(secondUserId);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete First Test User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/{{firstUserId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{firstUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Second Test User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/{{firstUserId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{firstUserId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Should return 401 when no Token - GET /users",
							"item": [
								{
									"name": "Should return 401 when no Token - GET /users",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return 401 when no Token - GET /users\", function () {",
													"    pm.response.to.have.status(401);",
													"    pm.response.to.have.body(\"Unauthorized\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Should return 403 when as Not Admin User - GET /users",
							"item": [
								{
									"name": "Should return 403 when as Not Admin User - GET /users",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return 403 when as Not Admin User - GET /users\", function () {",
													"    const resBody = pm.response.json();",
													"    pm.response.to.have.status(403);",
													"    pm.expect(resBody.message).to.eql('Unauthorized: Only administrators can perform this action');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{notAdminAuthToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "GET /users/id",
					"item": [
						{
							"name": "Should return 401 when no Token - GET /users/id",
							"item": [
								{
									"name": "Create First Test User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var resBody = pm.response.json();",
													"pm.collectionVariables.set(\"firstUserId\", resBody.id);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randId = Math.floor(Math.random() * 900000000) + 100000000;",
													"const userEmail = \"email_\" + randId + \"@postman.com\";",
													"pm.collectionVariables.set(\"userEmail\", userEmail);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{userName}}\",\n  \"surname\": \"{{userSurname}}\",\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{userPassword}}\",\n  \"phoneNumber\": \"{{userPhoneNumber}}\",\n  \"birthDate\": \"{{userBirthDate}}\",\n  \"contract\": {\n    \"type\": \"{{userContractType}}\",\n    \"salary\": \"{{userSalary}}\",\n    \"position\": \"{{userPosition}}\",\n    \"startTime\": \"{{userStartTime}}\",\n    \"endTime\": \"{{userEndTime}}\"\n  },\n  \"notes\": \"{{userNotes}}\",\n  \"isAdmin\": \"{{userIsAdmin}}\",\n  \"isActivated\": \"{{userIsActivated}}\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Should return 401 when no Token - GET /users/id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return 401 when no Token - GET /users/id\", function () {",
													"    pm.response.to.have.status(401);",
													"    pm.response.to.have.body(\"Unauthorized\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/{{firstUserId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{firstUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete First Test User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/{{firstUserId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{firstUserId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Should return 200 and Contain User Data as Not Admin User - GET /users/id",
							"item": [
								{
									"name": "Create First Test User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var resBody = pm.response.json();",
													"pm.collectionVariables.set(\"firstUserId\", resBody.id);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randId = Math.floor(Math.random() * 900000000) + 100000000;",
													"const userEmail = \"email_\" + randId + \"@postman.com\";",
													"pm.collectionVariables.set(\"userEmail\", userEmail);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{userName}}\",\n  \"surname\": \"{{userSurname}}\",\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{userPassword}}\",\n  \"phoneNumber\": \"{{userPhoneNumber}}\",\n  \"birthDate\": \"{{userBirthDate}}\",\n  \"contract\": {\n    \"type\": \"{{userContractType}}\",\n    \"salary\": \"{{userSalary}}\",\n    \"position\": \"{{userPosition}}\",\n    \"startTime\": \"{{userStartTime}}\",\n    \"endTime\": \"{{userEndTime}}\"\n  },\n  \"notes\": \"{{userNotes}}\",\n  \"isAdmin\": \"{{userIsAdmin}}\",\n  \"isActivated\": \"{{userIsActivated}}\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Should return 200 and Contain User Data as Not Admin User - GET /users/id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return 200 and Contain User Data as Not Admin User - GET /users/id\", function () {",
													"    const resBody = pm.response.json();",
													"    pm.response.to.have.status(200);",
													"",
													"    pm.expect(resBody.name).to.equal(pm.collectionVariables.get(\"userName\"));",
													"    pm.expect(resBody.surname).to.equal(pm.collectionVariables.get(\"userSurname\"));",
													"    pm.expect(resBody.email).to.equal(pm.collectionVariables.get(\"userEmail\"));",
													"    pm.expect(resBody.phoneNumber).to.equal(pm.collectionVariables.get(\"userPhoneNumber\"));",
													"    pm.expect(resBody.birthDate).to.include(pm.collectionVariables.get(\"userBirthDate\"));",
													"    pm.expect(resBody.contract.type).to.equal(pm.collectionVariables.get(\"userContractType\"));",
													"    pm.expect(resBody.contract.salary).to.equal(pm.collectionVariables.get(\"userSalary\"));",
													"    pm.expect(resBody.contract.position).to.equal(pm.collectionVariables.get(\"userPosition\"));",
													"    pm.expect(resBody.contract.startTime).to.include(pm.collectionVariables.get(\"userStartTime\"));",
													"    pm.expect(resBody.contract.endTime).to.include(pm.collectionVariables.get(\"userEndTime\"));",
													"    pm.expect(resBody.notes).to.equal(pm.collectionVariables.get(\"userNotes\"));",
													"    pm.expect(resBody.isAdmin).to.equal(pm.collectionVariables.get(\"userIsAdmin\"));",
													"    pm.expect(resBody.isActivated).to.equal(pm.collectionVariables.get(\"userIsActivated\"));",
													"    pm.expect(resBody._id).to.equal(pm.collectionVariables.get(\"firstUserId\"));",
													"    pm.expect(resBody).to.have.property('lastUpdated');",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/{{firstUserId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{firstUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete First Test User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/{{firstUserId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{firstUserId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Should return 404 when Id Not Found - GET /users/id",
							"item": [
								{
									"name": "Should return 404 when Id Not Found - GET /users/id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return 404 when Id Not Found - GET /users/id\", function () {",
													"    const resBody = pm.response.json();",
													"    pm.response.to.have.status(404);",
													"    pm.expect(resBody.message).to.eql('User with id = 666b5bfd8e3c464090cb69b8 not found');",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/666b5bfd8e3c464090cb69b8",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"666b5bfd8e3c464090cb69b8"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Should return 400 when Invalid User Id Format - GET /users/id",
							"item": [
								{
									"name": "Should return 400 when Invalid User Id Format - GET /users/id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return 400 when Invalid User Id Format - GET /users/id\", function () {",
													"    const resBody = pm.response.json();",
													"    pm.response.to.have.status(400);",
													"    pm.expect(resBody.message).to.eql('Invalid user ID format');",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/invalidUserIdFormat",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"invalidUserIdFormat"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Should return 200 and Contain User Data as Admin User - GET /users/id",
							"item": [
								{
									"name": "Create First Test User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const resBody = pm.response.json();",
													"pm.collectionVariables.set(\"firstUserId\", resBody.id);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randId = Math.floor(Math.random() * 900000000) + 100000000;",
													"const userEmail = \"email_\" + randId + \"@postman.com\";",
													"pm.collectionVariables.set(\"userEmail\", userEmail);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{userName}}\",\n  \"surname\": \"{{userSurname}}\",\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{userPassword}}\",\n  \"phoneNumber\": \"{{userPhoneNumber}}\",\n  \"birthDate\": \"{{userBirthDate}}\",\n  \"contract\": {\n    \"type\": \"{{userContractType}}\",\n    \"salary\": \"{{userSalary}}\",\n    \"position\": \"{{userPosition}}\",\n    \"startTime\": \"{{userStartTime}}\",\n    \"endTime\": \"{{userEndTime}}\"\n  },\n  \"notes\": \"{{userNotes}}\",\n  \"isAdmin\": \"{{userIsAdmin}}\",\n  \"isActivated\": \"{{userIsActivated}}\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Should return 200 and Contain User Data as Admin User - GET /users/id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return 200 and Contain User Data as Admin User - GET /users/id\", function () {",
													"    const resBody = pm.response.json();",
													"    pm.response.to.have.status(200);",
													"",
													"    pm.expect(resBody.name).to.equal(pm.collectionVariables.get(\"userName\"));",
													"    pm.expect(resBody.surname).to.equal(pm.collectionVariables.get(\"userSurname\"));",
													"    pm.expect(resBody.email).to.equal(pm.collectionVariables.get(\"userEmail\"));",
													"    pm.expect(resBody.phoneNumber).to.equal(pm.collectionVariables.get(\"userPhoneNumber\"));",
													"    pm.expect(resBody.birthDate).to.include(pm.collectionVariables.get(\"userBirthDate\"));",
													"    pm.expect(resBody.contract.type).to.equal(pm.collectionVariables.get(\"userContractType\"));",
													"    pm.expect(resBody.contract.salary).to.equal(pm.collectionVariables.get(\"userSalary\"));",
													"    pm.expect(resBody.contract.position).to.equal(pm.collectionVariables.get(\"userPosition\"));",
													"    pm.expect(resBody.contract.startTime).to.include(pm.collectionVariables.get(\"userStartTime\"));",
													"    pm.expect(resBody.contract.endTime).to.include(pm.collectionVariables.get(\"userEndTime\"));",
													"    pm.expect(resBody.notes).to.equal(pm.collectionVariables.get(\"userNotes\"));",
													"    pm.expect(resBody.isAdmin).to.equal(pm.collectionVariables.get(\"userIsAdmin\"));",
													"    pm.expect(resBody.isActivated).to.equal(pm.collectionVariables.get(\"userIsActivated\"));",
													"    pm.expect(resBody._id).to.equal(pm.collectionVariables.get(\"firstUserId\"));",
													"    pm.expect(resBody).to.have.property('lastUpdated');",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/{{firstUserId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{firstUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete First Test User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/{{firstUserId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{firstUserId}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "POST /users",
					"item": [
						{
							"name": "Should return 401 when no Token - POST /users",
							"item": [
								{
									"name": "Should return 401 when no Token - POST /users",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return 401 when no Token - POST /users\", function () {",
													"    pm.response.to.have.status(401);",
													"    pm.response.to.have.body(\"Unauthorized\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randId = Math.floor(Math.random() * 900000000) + 100000000;",
													"const userEmail = \"email_\" + randId + \"@postman.com\";",
													"pm.collectionVariables.set(\"userEmail\", userEmail);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{userName}}\",\n  \"surname\": \"{{userSurname}}\",\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{userPassword}}\",\n  \"phoneNumber\": \"{{userPhoneNumber}}\",\n  \"birthDate\": \"{{userBirthDate}}\",\n  \"contract\": {\n    \"type\": \"{{userContractType}}\",\n    \"salary\": \"{{userSalary}}\",\n    \"position\": \"{{userPosition}}\",\n    \"startTime\": \"{{userStartTime}}\",\n    \"endTime\": \"{{userEndTime}}\"\n  },\n  \"notes\": \"{{userNotes}}\",\n  \"isAdmin\": \"{{userIsAdmin}}\",\n  \"isActivated\": \"{{userIsActivated}}\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Should return 403 as Not Admin User - POST /users",
							"item": [
								{
									"name": "Should return 403 as Not Admin User - POST /users",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return 403 as Not Admin User - POST /users\", function () {",
													"    const resBody = pm.response.json();",
													"    pm.response.to.have.status(403);",
													"    pm.expect(resBody.message).to.eql('Unauthorized: Only administrators can perform this action');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randId = Math.floor(Math.random() * 900000000) + 100000000;",
													"const userEmail = \"email_\" + randId + \"@postman.com\";",
													"pm.collectionVariables.set(\"userEmail\", userEmail);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{notAdminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{userName}}\",\n  \"surname\": \"{{userSurname}}\",\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{userPassword}}\",\n  \"phoneNumber\": \"{{userPhoneNumber}}\",\n  \"birthDate\": \"{{userBirthDate}}\",\n  \"contract\": {\n    \"type\": \"{{userContractType}}\",\n    \"salary\": \"{{userSalary}}\",\n    \"position\": \"{{userPosition}}\",\n    \"startTime\": \"{{userStartTime}}\",\n    \"endTime\": \"{{userEndTime}}\"\n  },\n  \"notes\": \"{{userNotes}}\",\n  \"isAdmin\": \"{{userIsAdmin}}\",\n  \"isActivated\": \"{{userIsActivated}}\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Should return 400 when Email already Exists - POST /users",
							"item": [
								{
									"name": "Should return 400 when Email already Exists - POST /users",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return 400 when Email already Exists - POST /users\", function () {",
													"    const resBody = pm.response.json();",
													"    pm.response.to.have.status(400);",
													"    pm.expect(resBody.message).to.eql('User with this email already exists');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{userName}}\",\n  \"surname\": \"{{userSurname}}\",\n  \"email\": \"{{apiTesterAdmin}}\",\n  \"password\": \"{{userPassword}}\",\n  \"phoneNumber\": \"{{userPhoneNumber}}\",\n  \"birthDate\": \"{{userBirthDate}}\",\n  \"contract\": {\n    \"type\": \"{{userContractType}}\",\n    \"salary\": \"{{userSalary}}\",\n    \"position\": \"{{userPosition}}\",\n    \"startTime\": \"{{userStartTime}}\",\n    \"endTime\": \"{{userEndTime}}\"\n  },\n  \"notes\": \"{{userNotes}}\",\n  \"isAdmin\": \"{{userIsAdmin}}\",\n  \"isActivated\": \"{{userIsActivated}}\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Should return 400 when Contract End Time is earlier than Start Time - POST /users",
							"item": [
								{
									"name": "Should return 400 when Contract End Time is earlier than Start Time - POST /users",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return 400 when Contract End Time is earlier than Start Time - POST /users\", function () {",
													"    const resBody = pm.response.json();",
													"    pm.response.to.have.status(400);",
													"    pm.expect(resBody.message).to.eql('End time cannot be earlier than start time');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randId = Math.floor(Math.random() * 900000000) + 100000000;",
													"const userEmail = \"email_\" + randId + \"@postman.com\";",
													"pm.collectionVariables.set(\"userEmail\", userEmail);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{userName}}\",\n  \"surname\": \"{{userSurname}}\",\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{userPassword}}\",\n  \"phoneNumber\": \"{{userPhoneNumber}}\",\n  \"birthDate\": \"{{userBirthDate}}\",\n  \"contract\": {\n    \"type\": \"{{userContractType}}\",\n    \"salary\": \"{{userSalary}}\",\n    \"position\": \"{{userPosition}}\",\n    \"startTime\": \"2021-01-02\",\n    \"endTime\": \"2021-01-01\"\n  },\n  \"notes\": \"{{userNotes}}\",\n  \"isAdmin\": \"{{userIsAdmin}}\",\n  \"isActivated\": \"{{userIsActivated}}\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Should return 200 and Create new User as Admin User - POST /users",
							"item": [
								{
									"name": "Should return 200 and Create new User as Admin User - POST /users",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return 200 and Create new User as Admin User - POST /users\", function () {",
													"    const resBody = pm.response.json();",
													"    pm.response.to.have.status(200);",
													"    ",
													"    pm.expect(resBody).to.have.property('id');",
													"    pm.expect(resBody.message).to.eql(`User has been created with id = ${resBody.id}`);",
													"    pm.collectionVariables.set(\"firstUserId\", resBody.id);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randId = Math.floor(Math.random() * 900000000) + 100000000;",
													"const userEmail = \"email_\" + randId + \"@postman.com\";",
													"pm.collectionVariables.set(\"userEmail\", userEmail);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{userName}}\",\n  \"surname\": \"{{userSurname}}\",\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{userPassword}}\",\n  \"phoneNumber\": \"{{userPhoneNumber}}\",\n  \"birthDate\": \"{{userBirthDate}}\",\n  \"contract\": {\n    \"type\": \"{{userContractType}}\",\n    \"salary\": \"{{userSalary}}\",\n    \"position\": \"{{userPosition}}\",\n    \"startTime\": \"{{userStartTime}}\",\n    \"endTime\": \"{{userEndTime}}\"\n  },\n  \"notes\": \"{{userNotes}}\",\n  \"isAdmin\": \"{{userIsAdmin}}\",\n  \"isActivated\": \"{{userIsActivated}}\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete First Test User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/{{firstUserId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{firstUserId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Should return 400 when Required Field is Missing (Name, Surname, Email) - POST /users",
							"item": [
								{
									"name": "Should return 400 when Required Field is Missing (Name, Surname, Email) - POST /users",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return 400 when Required Field is Missing (Name, Surname, Email) - POST /users\", function () {",
													"    const resBody = pm.response.json();",
													"    pm.response.to.have.status(400);",
													"    ",
													"    pm.expect(resBody.message).to.eql('User validation failed: name: Path `name` is required., surname: Path `surname` is required., email: Path `email` is required.');",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randId = Math.floor(Math.random() * 900000000) + 100000000;",
													"const userEmail = \"email_\" + randId + \"@postman.com\";",
													"pm.collectionVariables.set(\"userEmail\", userEmail);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"password\": \"{{userPassword}}\",\n  \"phoneNumber\": \"{{userPhoneNumber}}\",\n  \"birthDate\": \"{{userBirthDate}}\",\n  \"contract\": {\n    \"type\": \"{{userContractType}}\",\n    \"salary\": \"{{userSalary}}\",\n    \"position\": \"{{userPosition}}\",\n    \"startTime\": \"{{userStartTime}}\",\n    \"endTime\": \"{{userEndTime}}\"\n  },\n  \"notes\": \"{{userNotes}}\",\n  \"isAdmin\": \"{{userIsAdmin}}\",\n  \"isActivated\": \"{{userIsActivated}}\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Should return 200 and isAdmin and isActivated Should be `false` when Not Passed - POST /users",
							"item": [
								{
									"name": "Should return 200 and isAdmin and isActivated Should be `false` when Not Passed - POST /users",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const resBody = pm.response.json();",
													"const userId = resBody.id;",
													"pm.collectionVariables.set('firstUserId', userId);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randId = Math.floor(Math.random() * 900000000) + 100000000;",
													"const userEmail = \"email_\" + randId + \"@postman.com\";",
													"pm.collectionVariables.set(\"userEmail\", userEmail);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{userName}}\",\n  \"surname\": \"{{userSurname}}\",\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{userPassword}}\",\n  \"phoneNumber\": \"{{userPhoneNumber}}\",\n  \"birthDate\": \"{{userBirthDate}}\",\n  \"contract\": {\n    \"type\": \"{{userContractType}}\",\n    \"salary\": \"{{userSalary}}\",\n    \"position\": \"{{userPosition}}\",\n    \"startTime\": \"{{userStartTime}}\",\n    \"endTime\": \"{{userEndTime}}\"\n  },\n  \"notes\": \"{{userNotes}}\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "isAdmin and isActivated Should be `false`",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return 200 and isAdmin and isActivated Should be `false` when Not Passed - POST /users\", function () {",
													"    const resBody = pm.response.json();",
													"    pm.response.to.have.status(200);",
													"    pm.expect(resBody.isAdmin).to.equal(false);",
													"    pm.expect(resBody.isActivated).to.equal(false);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{notAdminAuthToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/{{firstUserId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{firstUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete First Test User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/{{firstUserId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{firstUserId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Should return 400 when Phone Number `< 9` - POST /users",
							"item": [
								{
									"name": "Should return 400 when Phone Number `< 9` - POST /users",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return 400 when Phone Number `< 9` - POST /users\", function () {",
													"    const resBody = pm.response.json();",
													"    ",
													"    pm.response.to.have.status(400);",
													"    pm.expect(resBody.message).to.eql('Phone number cannot be shorter than 9 digits or longer than 14');",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randId = Math.floor(Math.random() * 900000000) + 100000000;",
													"const userEmail = \"email_\" + randId + \"@postman.com\";",
													"pm.collectionVariables.set(\"userEmail\", userEmail);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{userName}}\",\n  \"surname\": \"{{userSurname}}\",\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{userPassword}}\",\n  \"phoneNumber\": \"54396405\",\n  \"birthDate\": \"{{userBirthDate}}\",\n  \"contract\": {\n    \"type\": \"{{userContractType}}\",\n    \"salary\": \"{{userSalary}}\",\n    \"position\": \"{{userPosition}}\",\n    \"startTime\": \"{{userStartTime}}\",\n    \"endTime\": \"{{userEndTime}}\"\n  },\n  \"notes\": \"{{userNotes}}\",\n  \"isAdmin\": \"{{userIsAdmin}}\",\n  \"isActivated\": \"{{userIsActivated}}\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Should return 400 when Phone Number `> 14` - POST /users Copy",
							"item": [
								{
									"name": "Should return 400 when Phone Number `> 14` - POST /users Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return 400 when Phone Number `> 14` - POST /users\", function () {",
													"    const resBody = pm.response.json();",
													"    ",
													"    pm.response.to.have.status(400);",
													"    pm.expect(resBody.message).to.eql('Phone number cannot be shorter than 9 digits or longer than 14');",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randId = Math.floor(Math.random() * 900000000) + 100000000;",
													"const userEmail = \"email_\" + randId + \"@postman.com\";",
													"pm.collectionVariables.set(\"userEmail\", userEmail);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{userName}}\",\n  \"surname\": \"{{userSurname}}\",\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{userPassword}}\",\n  \"phoneNumber\": \"854043493859324\",\n  \"birthDate\": \"{{userBirthDate}}\",\n  \"contract\": {\n    \"type\": \"{{userContractType}}\",\n    \"salary\": \"{{userSalary}}\",\n    \"position\": \"{{userPosition}}\",\n    \"startTime\": \"{{userStartTime}}\",\n    \"endTime\": \"{{userEndTime}}\"\n  },\n  \"notes\": \"{{userNotes}}\",\n  \"isAdmin\": \"{{userIsAdmin}}\",\n  \"isActivated\": \"{{userIsActivated}}\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Should return 400 when Password is `< 9` Chars - POST /users",
							"item": [
								{
									"name": "Should return 400 when Password is `< 9` Chars - POST /users",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return 400 when Password is `< 9` Chars - POST /users\", function () {",
													"    const resBody = pm.response.json();",
													"    ",
													"    pm.response.to.have.status(400);",
													"    pm.expect(resBody.message).to.eql('Password must be at least 9 characters long');",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randId = Math.floor(Math.random() * 900000000) + 100000000;",
													"const userEmail = \"email_\" + randId + \"@postman.com\";",
													"pm.collectionVariables.set(\"userEmail\", userEmail);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{userName}}\",\n  \"surname\": \"{{userSurname}}\",\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"d13!dsol\",\n  \"phoneNumber\": \"{{userPhoneNumber}}\",\n  \"birthDate\": \"{{userBirthDate}}\",\n  \"contract\": {\n    \"type\": \"{{userContractType}}\",\n    \"salary\": \"{{userSalary}}\",\n    \"position\": \"{{userPosition}}\",\n    \"startTime\": \"{{userStartTime}}\",\n    \"endTime\": \"{{userEndTime}}\"\n  },\n  \"notes\": \"{{userNotes}}\",\n  \"isAdmin\": \"{{userIsAdmin}}\",\n  \"isActivated\": \"{{userIsActivated}}\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "lastUpdated Field Should Be Set to Date.now even if Field passed in request - POST /users",
							"item": [
								{
									"name": "lastUpdated Field Should Be Set to Date.now even if Field passed in request - POST /users",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const resBody = pm.response.json();",
													"const userId = resBody.id;",
													"pm.collectionVariables.set('firstUserId', userId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randId = Math.floor(Math.random() * 900000000) + 100000000;",
													"const userEmail = \"email_\" + randId + \"@postman.com\";",
													"pm.collectionVariables.set(\"userEmail\", userEmail);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{userName}}\",\n  \"surname\": \"{{userSurname}}\",\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{userPassword}}\",\n  \"phoneNumber\": \"{{userPhoneNumber}}\",\n  \"birthDate\": \"{{userBirthDate}}\",\n  \"contract\": {\n    \"type\": \"{{userContractType}}\",\n    \"salary\": \"{{userSalary}}\",\n    \"position\": \"{{userPosition}}\",\n    \"startTime\": \"{{userStartTime}}\",\n    \"endTime\": \"{{userEndTime}}\"\n  },\n  \"notes\": \"{{userNotes}}\",\n  \"isAdmin\": \"{{userIsAdmin}}\",\n  \"isActivated\": \"{{userIsActivated}}\",\n  \"lastUpdated\": \"2025-01-01\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "lastUpdated Filed Should Not be set from Body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"lastUpdated Field Should Be Set to Date.now even if Field passed in request - POST /users\", function () {",
													"    const resBody = pm.response.json();",
													"    ",
													"    pm.response.to.have.status(200);",
													"    pm.expect(resBody.lastUpdated).to.not.eql('2025-01-01');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/{{firstUserId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{firstUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete First Test User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/{{firstUserId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{firstUserId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Should return 400 when Trying to add Position Filled other than Storekeeper, Accountant, IT - POST /users",
							"item": [
								{
									"name": "Should return 400 when Trying to add Position Filled other than Storekeeper, Accountant, IT - POST /users",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return 400 when Trying to add Position Filled other than Storekeeper, Accountant, IT - POST /users\", function () {",
													"    const resBody = pm.response.json();",
													"    ",
													"    pm.response.to.have.status(400);",
													"    pm.expect(resBody.message).to.eql('Invalid contract position. Allowed values: Storekeeper, Accountant, IT');",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randId = Math.floor(Math.random() * 900000000) + 100000000;",
													"const userEmail = \"email_\" + randId + \"@postman.com\";",
													"pm.collectionVariables.set(\"userEmail\", userEmail);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{userName}}\",\n  \"surname\": \"{{userSurname}}\",\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{userPassword}}\",\n  \"phoneNumber\": \"{{userPhoneNumber}}\",\n  \"birthDate\": \"{{userBirthDate}}\",\n  \"contract\": {\n    \"type\": \"{{userContractType}}\",\n    \"salary\": \"{{userSalary}}\",\n    \"position\": \"randomPosition\",\n    \"startTime\": \"{{userStartTime}}\",\n    \"endTime\": \"{{userEndTime}}\"\n  },\n  \"notes\": \"{{userNotes}}\",\n  \"isAdmin\": \"{{userIsAdmin}}\",\n  \"isActivated\": \"{{userIsActivated}}\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Should return 400 when Trying to add Contract Type Filled other than Employment, Mandate, B2B - POST /users",
							"item": [
								{
									"name": "Should return 400 when Trying to add Contract Type Filled other than Employment, Mandate, B2B - POST /users",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return 400 when Trying to add Contract Type Filled other than Employment, Mandate, B2B - POST /users\", function () {",
													"    const resBody = pm.response.json();",
													"    ",
													"    pm.response.to.have.status(400);",
													"    pm.expect(resBody.message).to.eql('Invalid contract type. Allowed values: Employment, Mandate, B2B');",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randId = Math.floor(Math.random() * 900000000) + 100000000;",
													"const userEmail = \"email_\" + randId + \"@postman.com\";",
													"pm.collectionVariables.set(\"userEmail\", userEmail);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{userName}}\",\n  \"surname\": \"{{userSurname}}\",\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{userPassword}}\",\n  \"phoneNumber\": \"{{userPhoneNumber}}\",\n  \"birthDate\": \"{{userBirthDate}}\",\n  \"contract\": {\n    \"type\": \"randomType\",\n    \"salary\": \"{{userSalary}}\",\n    \"position\": \"{{userPosition}}\",\n    \"startTime\": \"{{userStartTime}}\",\n    \"endTime\": \"{{userEndTime}}\"\n  },\n  \"notes\": \"{{userNotes}}\",\n  \"isAdmin\": \"{{userIsAdmin}}\",\n  \"isActivated\": \"{{userIsActivated}}\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Should return 400 when Trying to Add something Other than Date to birthDate Field - POST /users",
							"item": [
								{
									"name": "Should return 400 when Trying to Add something Other than Date to birthDate Field - POST /users",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return 400 when Trying to Add something Other than Date to birthDate Field - POST /users\", function () {",
													"    const resBody = pm.response.json();",
													"    ",
													"    pm.response.to.have.status(400);",
													"    pm.expect(resBody.message).to.eql('Invalid date format');",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randId = Math.floor(Math.random() * 900000000) + 100000000;",
													"const userEmail = \"email_\" + randId + \"@postman.com\";",
													"pm.collectionVariables.set(\"userEmail\", userEmail);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{userName}}\",\n  \"surname\": \"{{userSurname}}\",\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{userPassword}}\",\n  \"phoneNumber\": \"{{userPhoneNumber}}\",\n  \"birthDate\": \"somethingRandom\",\n  \"contract\": {\n    \"type\": \"{{userContractType}}\",\n    \"salary\": \"{{userSalary}}\",\n    \"position\": \"{{userPosition}}\",\n    \"startTime\": \"{{userStartTime}}\",\n    \"endTime\": \"{{userEndTime}}\"\n  },\n  \"notes\": \"{{userNotes}}\",\n  \"isAdmin\": \"{{userIsAdmin}}\",\n  \"isActivated\": \"{{userIsActivated}}\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Should return 400 when Trying to Add something Other than Date to startTime Field - POST /users",
							"item": [
								{
									"name": "Should return 400 when Trying to Add something Other than Date to startTime Field - POST /users",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return 400 when Trying to Add something Other than Date to startTime Field - POST /users\", function () {",
													"    const resBody = pm.response.json();",
													"    ",
													"    pm.response.to.have.status(400);",
													"    pm.expect(resBody.message).to.eql('Invalid date format');",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randId = Math.floor(Math.random() * 900000000) + 100000000;",
													"const userEmail = \"email_\" + randId + \"@postman.com\";",
													"pm.collectionVariables.set(\"userEmail\", userEmail);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{userName}}\",\n  \"surname\": \"{{userSurname}}\",\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{userPassword}}\",\n  \"phoneNumber\": \"{{userPhoneNumber}}\",\n  \"birthDate\": \"{{userBirthDate}}\",\n  \"contract\": {\n    \"type\": \"{{userContractType}}\",\n    \"salary\": \"{{userSalary}}\",\n    \"position\": \"{{userPosition}}\",\n    \"startTime\": \"somethingRandom\",\n    \"endTime\": \"{{userEndTime}}\"\n  },\n  \"notes\": \"{{userNotes}}\",\n  \"isAdmin\": \"{{userIsAdmin}}\",\n  \"isActivated\": \"{{userIsActivated}}\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Should return 400 when Trying to Add something Other than Date to endTime Field - POST /users",
							"item": [
								{
									"name": "Should return 400 when Trying to Add something Other than Date to endTime Field - POST /users",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return 400 when Trying to Add something Other than Date to endTime Field - POST /users\", function () {",
													"    const resBody = pm.response.json();",
													"    ",
													"    pm.response.to.have.status(400);",
													"    pm.expect(resBody.message).to.eql('Invalid date format');",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randId = Math.floor(Math.random() * 900000000) + 100000000;",
													"const userEmail = \"email_\" + randId + \"@postman.com\";",
													"pm.collectionVariables.set(\"userEmail\", userEmail);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{userName}}\",\n  \"surname\": \"{{userSurname}}\",\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{userPassword}}\",\n  \"phoneNumber\": \"{{userPhoneNumber}}\",\n  \"birthDate\": \"{{userBirthDate}}\",\n  \"contract\": {\n    \"type\": \"{{userContractType}}\",\n    \"salary\": \"{{userSalary}}\",\n    \"position\": \"{{userPosition}}\",\n    \"startTime\": \"{{userStartTime}}\",\n    \"endTime\": \"somethingRandom\"\n  },\n  \"notes\": \"{{userNotes}}\",\n  \"isAdmin\": \"{{userIsAdmin}}\",\n  \"isActivated\": \"{{userIsActivated}}\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "PUT /users/id",
					"item": [
						{
							"name": "Should return 401 when no Token - PUT /users",
							"item": [
								{
									"name": "Create First Test User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const resBody = pm.response.json();",
													"pm.collectionVariables.set(\"firstUserId\", resBody.id);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randId = Math.floor(Math.random() * 900000000) + 100000000;",
													"const userEmail = \"email_\" + randId + \"@postman.com\";",
													"pm.collectionVariables.set(\"userEmail\", userEmail);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{userName}}\",\n  \"surname\": \"{{userSurname}}\",\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{userPassword}}\",\n  \"phoneNumber\": \"{{userPhoneNumber}}\",\n  \"birthDate\": \"{{userBirthDate}}\",\n  \"contract\": {\n    \"type\": \"{{userContractType}}\",\n    \"salary\": \"{{userSalary}}\",\n    \"position\": \"{{userPosition}}\",\n    \"startTime\": \"{{userStartTime}}\",\n    \"endTime\": \"{{userEndTime}}\"\n  },\n  \"notes\": \"{{userNotes}}\",\n  \"isAdmin\": \"{{userIsAdmin}}\",\n  \"isActivated\": \"{{userIsActivated}}\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Should return 401 when no Token - PUT /users",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return 401 when no Token - PUT /users\", function () {",
													"    pm.response.to.have.status(401);",
													"    pm.response.to.have.body(\"Unauthorized\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randId = Math.floor(Math.random() * 900000000) + 100000000;",
													"const userEmail = \"email_\" + randId + \"@postman.com\";",
													"pm.collectionVariables.set(\"userEmail\", userEmail);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{userName}}\",\n  \"surname\": \"{{userSurname}}\",\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{userPassword}}\",\n  \"phoneNumber\": \"{{userPhoneNumber}}\",\n  \"birthDate\": \"{{userBirthDate}}\",\n  \"contract\": {\n    \"type\": \"{{userContractType}}\",\n    \"salary\": \"{{userSalary}}\",\n    \"position\": \"{{userPosition}}\",\n    \"startTime\": \"{{userStartTime}}\",\n    \"endTime\": \"{{userEndTime}}\"\n  },\n  \"notes\": \"{{userNotes}}\",\n  \"isAdmin\": \"{{userIsAdmin}}\",\n  \"isActivated\": \"{{userIsActivated}}\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/{{firstUserId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{firstUserId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Should return 403 as Not Admin User - PUT /users",
							"item": [
								{
									"name": "Create First Test User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const resBody = pm.response.json();",
													"pm.collectionVariables.set(\"firstUserId\", resBody.id);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randId = Math.floor(Math.random() * 900000000) + 100000000;",
													"const userEmail = \"email_\" + randId + \"@postman.com\";",
													"pm.collectionVariables.set(\"userEmail\", userEmail);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{userName}}\",\n  \"surname\": \"{{userSurname}}\",\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{userPassword}}\",\n  \"phoneNumber\": \"{{userPhoneNumber}}\",\n  \"birthDate\": \"{{userBirthDate}}\",\n  \"contract\": {\n    \"type\": \"{{userContractType}}\",\n    \"salary\": \"{{userSalary}}\",\n    \"position\": \"{{userPosition}}\",\n    \"startTime\": \"{{userStartTime}}\",\n    \"endTime\": \"{{userEndTime}}\"\n  },\n  \"notes\": \"{{userNotes}}\",\n  \"isAdmin\": \"{{userIsAdmin}}\",\n  \"isActivated\": \"{{userIsActivated}}\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Should return 403 as Not Admin User - PUT /users",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randId = Math.floor(Math.random() * 900000000) + 100000000;",
													"const userEmail = \"email_\" + randId + \"@postman.com\";",
													"pm.collectionVariables.set(\"userEmail\", userEmail);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return 403 as Not Admin User - PUT /users\", function () {",
													"    const resBody = pm.response.json();",
													"    pm.response.to.have.status(403);",
													"    pm.expect(resBody.message).to.eql('Unauthorized: Only administrators can perform this action');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{notAdminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{userName}}\",\n  \"surname\": \"{{userSurname}}\",\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{userPassword}}\",\n  \"phoneNumber\": \"{{userPhoneNumber}}\",\n  \"birthDate\": \"{{userBirthDate}}\",\n  \"contract\": {\n    \"type\": \"{{userContractType}}\",\n    \"salary\": \"{{userSalary}}\",\n    \"position\": \"{{userPosition}}\",\n    \"startTime\": \"{{userStartTime}}\",\n    \"endTime\": \"{{userEndTime}}\"\n  },\n  \"notes\": \"{{userNotes}}\",\n  \"isAdmin\": \"{{userIsAdmin}}\",\n  \"isActivated\": \"{{userIsActivated}}\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/{{firstUserId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{firstUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete First Test User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/{{firstUserId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{firstUserId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Should return 404 when Id Not Found - PUT /users/id",
							"item": [
								{
									"name": "Should return 404 when Id Not Found - PUT /users/id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return 404 when Id Not Found - PUT /users/id\", function () {",
													"    const resBody = pm.response.json();",
													"    pm.response.to.have.status(404);",
													"    pm.expect(resBody.message).to.eql('User with id = 666b5bfd8e3c464090cb69b8 not found');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randId = Math.floor(Math.random() * 900000000) + 100000000;",
													"const userEmail = \"email_\" + randId + \"@postman.com\";",
													"pm.collectionVariables.set(\"userEmail\", userEmail);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{userName}}\",\n  \"surname\": \"{{userSurname}}\",\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{userPassword}}\",\n  \"phoneNumber\": \"{{userPhoneNumber}}\",\n  \"birthDate\": \"{{userBirthDate}}\",\n  \"contract\": {\n    \"type\": \"{{userContractType}}\",\n    \"salary\": \"{{userSalary}}\",\n    \"position\": \"{{userPosition}}\",\n    \"startTime\": \"{{userStartTime}}\",\n    \"endTime\": \"{{userEndTime}}\"\n  },\n  \"notes\": \"{{userNotes}}\",\n  \"isAdmin\": \"{{userIsAdmin}}\",\n  \"isActivated\": \"{{userIsActivated}}\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/666b5bfd8e3c464090cb69b8",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"666b5bfd8e3c464090cb69b8"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Should return 400 when Invalid User Id Format - PUT /users/id",
							"item": [
								{
									"name": "Should return 400 when Invalid User Id Format - PUT /users/id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return 400 when Invalid User Id Format - PUT /users/id\", function () {",
													"    const resBody = pm.response.json();",
													"    pm.response.to.have.status(400);",
													"    pm.expect(resBody.message).to.eql('Invalid user ID format');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randId = Math.floor(Math.random() * 900000000) + 100000000;",
													"const userEmail = \"email_\" + randId + \"@postman.com\";",
													"pm.collectionVariables.set(\"userEmail\", userEmail);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{userName}}\",\n  \"surname\": \"{{userSurname}}\",\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{userPassword}}\",\n  \"phoneNumber\": \"{{userPhoneNumber}}\",\n  \"birthDate\": \"{{userBirthDate}}\",\n  \"contract\": {\n    \"type\": \"{{userContractType}}\",\n    \"salary\": \"{{userSalary}}\",\n    \"position\": \"{{userPosition}}\",\n    \"startTime\": \"{{userStartTime}}\",\n    \"endTime\": \"{{userEndTime}}\"\n  },\n  \"notes\": \"{{userNotes}}\",\n  \"isAdmin\": \"{{userIsAdmin}}\",\n  \"isActivated\": \"{{userIsActivated}}\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/invalidUserIdFormat",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"invalidUserIdFormat"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Should return 400 when Email already Exists - PUT /users",
							"item": [
								{
									"name": "Create First Test User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const resBody = pm.response.json();",
													"pm.collectionVariables.set(\"firstUserId\", resBody.id);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randId = Math.floor(Math.random() * 900000000) + 100000000;",
													"const userEmail = \"email_\" + randId + \"@postman.com\";",
													"pm.collectionVariables.set(\"userEmail\", userEmail);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{userName}}\",\n  \"surname\": \"{{userSurname}}\",\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{userPassword}}\",\n  \"phoneNumber\": \"{{userPhoneNumber}}\",\n  \"birthDate\": \"{{userBirthDate}}\",\n  \"contract\": {\n    \"type\": \"{{userContractType}}\",\n    \"salary\": \"{{userSalary}}\",\n    \"position\": \"{{userPosition}}\",\n    \"startTime\": \"{{userStartTime}}\",\n    \"endTime\": \"{{userEndTime}}\"\n  },\n  \"notes\": \"{{userNotes}}\",\n  \"isAdmin\": \"{{userIsAdmin}}\",\n  \"isActivated\": \"{{userIsActivated}}\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Should return 400 when Email already Exists - PUT /users",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return 400 when Email already Exists - PUT /users\", function () {",
													"    const resBody = pm.response.json();",
													"    pm.response.to.have.status(400);",
													"    pm.expect(resBody.message).to.eql('User with this email already exists');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"{{apiTesterAdmin}}\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/{{firstUserId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{firstUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete First Test User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/{{firstUserId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{firstUserId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Should return 400 when Contract End Time is earlier than Start Time - PUT /users",
							"item": [
								{
									"name": "Create First Test User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const resBody = pm.response.json();",
													"pm.collectionVariables.set(\"firstUserId\", resBody.id);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randId = Math.floor(Math.random() * 900000000) + 100000000;",
													"const userEmail = \"email_\" + randId + \"@postman.com\";",
													"pm.collectionVariables.set(\"userEmail\", userEmail);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{userName}}\",\n  \"surname\": \"{{userSurname}}\",\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{userPassword}}\",\n  \"phoneNumber\": \"{{userPhoneNumber}}\",\n  \"birthDate\": \"{{userBirthDate}}\",\n  \"contract\": {\n    \"type\": \"{{userContractType}}\",\n    \"salary\": \"{{userSalary}}\",\n    \"position\": \"{{userPosition}}\",\n    \"startTime\": \"{{userStartTime}}\",\n    \"endTime\": \"{{userEndTime}}\"\n  },\n  \"notes\": \"{{userNotes}}\",\n  \"isAdmin\": \"{{userIsAdmin}}\",\n  \"isActivated\": \"{{userIsActivated}}\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Should return 400 when Contract End Time is earlier than Start Time - PUT /users",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return 400 when Contract End Time is earlier than Start Time - PUT /users\", function () {",
													"    const resBody = pm.response.json();",
													"    pm.response.to.have.status(400);",
													"    pm.expect(resBody.message).to.eql('End time cannot be earlier than start time');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"contract\": {\n    \"startTime\": \"2021-01-02\",\n    \"endTime\": \"2021-01-01\"\n  }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/{{firstUserId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{firstUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete First Test User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/{{firstUserId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{firstUserId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Should return 200 and Update User as Activated Admin User - PUT /users",
							"item": [
								{
									"name": "Create First Test User",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randId = Math.floor(Math.random() * 900000000) + 100000000;",
													"const userEmail = \"email_\" + randId + \"@postman.com\";",
													"pm.collectionVariables.set(\"userEmail\", userEmail);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const resBody = pm.response.json();",
													"pm.collectionVariables.set(\"firstUserId\", resBody.id);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{userName}}\",\n  \"surname\": \"{{userSurname}}\",\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{userPassword}}\",\n  \"phoneNumber\": \"{{userPhoneNumber}}\",\n  \"birthDate\": \"{{userBirthDate}}\",\n  \"contract\": {\n    \"type\": \"{{userContractType}}\",\n    \"salary\": \"{{userSalary}}\",\n    \"position\": \"{{userPosition}}\",\n    \"startTime\": \"{{userStartTime}}\",\n    \"endTime\": \"{{userEndTime}}\"\n  },\n  \"notes\": \"{{userNotes}}\",\n  \"isAdmin\": \"{{userIsAdmin}}\",\n  \"isActivated\": \"{{userIsActivated}}\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Should return 200 and Update User as Activated Admin User - PUT /users",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randId = Math.floor(Math.random() * 900000000) + 100000000;",
													"const userEmail = \"email_\" + randId + \"@postman.com\";",
													"pm.collectionVariables.set(\"userEmail\", userEmail);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"{{userEmail}}\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/{{firstUserId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{firstUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User Data Should be Updated",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return 200 and Update User as Activated Admin User - PUT /users\", function () {",
													"    const resBody = pm.response.json();",
													"    pm.response.to.have.status(200);",
													"",
													"    pm.expect(resBody.name).to.equal(pm.collectionVariables.get(\"userName\"));",
													"    pm.expect(resBody.surname).to.equal(pm.collectionVariables.get(\"userSurname\"));",
													"    pm.expect(resBody.email).to.equal(pm.collectionVariables.get(\"userEmail\"));",
													"    pm.expect(resBody.phoneNumber).to.equal(pm.collectionVariables.get(\"userPhoneNumber\"));",
													"    pm.expect(resBody.birthDate).to.include(pm.collectionVariables.get(\"userBirthDate\"));",
													"    pm.expect(resBody.contract.type).to.equal(pm.collectionVariables.get(\"userContractType\"));",
													"    pm.expect(resBody.contract.salary).to.equal(pm.collectionVariables.get(\"userSalary\"));",
													"    pm.expect(resBody.contract.position).to.equal(pm.collectionVariables.get(\"userPosition\"));",
													"    pm.expect(resBody.contract.startTime).to.include(pm.collectionVariables.get(\"userStartTime\"));",
													"    pm.expect(resBody.contract.endTime).to.include(pm.collectionVariables.get(\"userEndTime\"));",
													"    pm.expect(resBody.notes).to.equal(pm.collectionVariables.get(\"userNotes\"));",
													"    pm.expect(resBody.isAdmin).to.equal(pm.collectionVariables.get(\"userIsAdmin\"));",
													"    pm.expect(resBody.isActivated).to.equal(pm.collectionVariables.get(\"userIsActivated\"));",
													"    pm.expect(resBody._id).to.equal(pm.collectionVariables.get(\"firstUserId\"));",
													"    pm.expect(resBody).to.have.property('lastUpdated');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/{{firstUserId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{firstUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete First Test User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/{{firstUserId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{firstUserId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Should return 400 when Phone Number `< 9` - PUT /users",
							"item": [
								{
									"name": "Create First Test User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const resBody = pm.response.json();",
													"pm.collectionVariables.set(\"firstUserId\", resBody.id);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randId = Math.floor(Math.random() * 900000000) + 100000000;",
													"const userEmail = \"email_\" + randId + \"@postman.com\";",
													"pm.collectionVariables.set(\"userEmail\", userEmail);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{userName}}\",\n  \"surname\": \"{{userSurname}}\",\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{userPassword}}\",\n  \"phoneNumber\": \"{{userPhoneNumber}}\",\n  \"birthDate\": \"{{userBirthDate}}\",\n  \"contract\": {\n    \"type\": \"{{userContractType}}\",\n    \"salary\": \"{{userSalary}}\",\n    \"position\": \"{{userPosition}}\",\n    \"startTime\": \"{{userStartTime}}\",\n    \"endTime\": \"{{userEndTime}}\"\n  },\n  \"notes\": \"{{userNotes}}\",\n  \"isAdmin\": \"{{userIsAdmin}}\",\n  \"isActivated\": \"{{userIsActivated}}\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Should return 400 when Phone Number `< 9` - PUT /users",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return 400 when Phone Number `< 9` - PUT /users\", function () {",
													"    const resBody = pm.response.json();",
													"    pm.response.to.have.status(400);",
													"    pm.expect(resBody.message).to.eql('Phone number cannot be shorter than 9 digits or longer than 14');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"phoneNumber\": \"84932843\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/{{firstUserId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{firstUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete First Test User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/{{firstUserId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{firstUserId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Should return 400 when Phone Number `> 14` - PUT /users Copy",
							"item": [
								{
									"name": "Create First Test User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const resBody = pm.response.json();",
													"pm.collectionVariables.set(\"firstUserId\", resBody.id);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randId = Math.floor(Math.random() * 900000000) + 100000000;",
													"const userEmail = \"email_\" + randId + \"@postman.com\";",
													"pm.collectionVariables.set(\"userEmail\", userEmail);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{userName}}\",\n  \"surname\": \"{{userSurname}}\",\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{userPassword}}\",\n  \"phoneNumber\": \"{{userPhoneNumber}}\",\n  \"birthDate\": \"{{userBirthDate}}\",\n  \"contract\": {\n    \"type\": \"{{userContractType}}\",\n    \"salary\": \"{{userSalary}}\",\n    \"position\": \"{{userPosition}}\",\n    \"startTime\": \"{{userStartTime}}\",\n    \"endTime\": \"{{userEndTime}}\"\n  },\n  \"notes\": \"{{userNotes}}\",\n  \"isAdmin\": \"{{userIsAdmin}}\",\n  \"isActivated\": \"{{userIsActivated}}\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Should return 400 when Phone Number `> 14` - PUT /users Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return 400 when Phone Number `> 14` - PUT /users Copy\", function () {",
													"    const resBody = pm.response.json();",
													"    pm.response.to.have.status(400);",
													"    pm.expect(resBody.message).to.eql('Phone number cannot be shorter than 9 digits or longer than 14');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"phoneNumber\": \"430392842947125\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/{{firstUserId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{firstUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete First Test User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/{{firstUserId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{firstUserId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Should return 400 when Password is `< 9` Chars - PUT /users",
							"item": [
								{
									"name": "Create First Test User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const resBody = pm.response.json();",
													"pm.collectionVariables.set(\"firstUserId\", resBody.id);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randId = Math.floor(Math.random() * 900000000) + 100000000;",
													"const userEmail = \"email_\" + randId + \"@postman.com\";",
													"pm.collectionVariables.set(\"userEmail\", userEmail);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{userName}}\",\n  \"surname\": \"{{userSurname}}\",\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{userPassword}}\",\n  \"phoneNumber\": \"{{userPhoneNumber}}\",\n  \"birthDate\": \"{{userBirthDate}}\",\n  \"contract\": {\n    \"type\": \"{{userContractType}}\",\n    \"salary\": \"{{userSalary}}\",\n    \"position\": \"{{userPosition}}\",\n    \"startTime\": \"{{userStartTime}}\",\n    \"endTime\": \"{{userEndTime}}\"\n  },\n  \"notes\": \"{{userNotes}}\",\n  \"isAdmin\": \"{{userIsAdmin}}\",\n  \"isActivated\": \"{{userIsActivated}}\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Should return 400 when Password is `< 9` Chars - PUT /users",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return 400 when Password is `< 9` Chars - PUT /users\", function () {",
													"    const resBody = pm.response.json();",
													"    pm.response.to.have.status(400);",
													"    pm.expect(resBody.message).to.eql('Password must be at least 9 characters long');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"password\": \"g92japsi\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/{{firstUserId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{firstUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete First Test User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/{{firstUserId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{firstUserId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "lastUpdated Field Should Be Set to Date.now even if Field passed in request- PUT /users",
							"item": [
								{
									"name": "Create First Test User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const resBody = pm.response.json();",
													"pm.collectionVariables.set(\"firstUserId\", resBody.id);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randId = Math.floor(Math.random() * 900000000) + 100000000;",
													"const userEmail = \"email_\" + randId + \"@postman.com\";",
													"pm.collectionVariables.set(\"userEmail\", userEmail);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{userName}}\",\n  \"surname\": \"{{userSurname}}\",\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{userPassword}}\",\n  \"phoneNumber\": \"{{userPhoneNumber}}\",\n  \"birthDate\": \"{{userBirthDate}}\",\n  \"contract\": {\n    \"type\": \"{{userContractType}}\",\n    \"salary\": \"{{userSalary}}\",\n    \"position\": \"{{userPosition}}\",\n    \"startTime\": \"{{userStartTime}}\",\n    \"endTime\": \"{{userEndTime}}\"\n  },\n  \"notes\": \"{{userNotes}}\",\n  \"isAdmin\": \"{{userIsAdmin}}\",\n  \"isActivated\": \"{{userIsActivated}}\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "lastUpdated Field Should Be Set to Date.now even if Field passed in request- PUT /users",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"lastUpdated\": \"2023-03-09\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/{{firstUserId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{firstUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "lastUpdated Filed Should Not be set from Body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"lastUpdated Field Should Be Set to Date.now even if Field passed in request- PUT /users\", function () {",
													"    const resBody = pm.response.json();",
													"    pm.response.to.have.status(200);",
													"",
													"    pm.expect(resBody.lastUpdated).to.not.eql('2023-03-09');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/{{firstUserId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{firstUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete First Test User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/{{firstUserId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{firstUserId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Should return 400 when Trying to add Position Filled other than Storekeeper, Accountant, IT - PUT /users",
							"item": [
								{
									"name": "Create First Test User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const resBody = pm.response.json();",
													"pm.collectionVariables.set(\"firstUserId\", resBody.id);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randId = Math.floor(Math.random() * 900000000) + 100000000;",
													"const userEmail = \"email_\" + randId + \"@postman.com\";",
													"pm.collectionVariables.set(\"userEmail\", userEmail);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{userName}}\",\n  \"surname\": \"{{userSurname}}\",\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{userPassword}}\",\n  \"phoneNumber\": \"{{userPhoneNumber}}\",\n  \"birthDate\": \"{{userBirthDate}}\",\n  \"contract\": {\n    \"type\": \"{{userContractType}}\",\n    \"salary\": \"{{userSalary}}\",\n    \"position\": \"{{userPosition}}\",\n    \"startTime\": \"{{userStartTime}}\",\n    \"endTime\": \"{{userEndTime}}\"\n  },\n  \"notes\": \"{{userNotes}}\",\n  \"isAdmin\": \"{{userIsAdmin}}\",\n  \"isActivated\": \"{{userIsActivated}}\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Should return 400 when Trying to add Position Filled other than Storekeeper, Accountant, IT - PUT /users",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return 400 when Trying to add Position Filled other than Storekeeper, Accountant, IT - PUT /users\", function () {",
													"    const resBody = pm.response.json();",
													"    ",
													"    pm.response.to.have.status(400);",
													"    pm.expect(resBody.message).to.eql('Invalid contract position. Allowed values: Storekeeper, Accountant, IT');",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"contract\": {\n    \"position\": \"randomPosition\"\n  }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/{{firstUserId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{firstUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete First Test User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/{{firstUserId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{firstUserId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Should return 400 when Trying to add Contract Type Filled other than Employment, Mandate, B2B - PUT /users",
							"item": [
								{
									"name": "Create First Test User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const resBody = pm.response.json();",
													"pm.collectionVariables.set(\"firstUserId\", resBody.id);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randId = Math.floor(Math.random() * 900000000) + 100000000;",
													"const userEmail = \"email_\" + randId + \"@postman.com\";",
													"pm.collectionVariables.set(\"userEmail\", userEmail);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{userName}}\",\n  \"surname\": \"{{userSurname}}\",\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{userPassword}}\",\n  \"phoneNumber\": \"{{userPhoneNumber}}\",\n  \"birthDate\": \"{{userBirthDate}}\",\n  \"contract\": {\n    \"type\": \"{{userContractType}}\",\n    \"salary\": \"{{userSalary}}\",\n    \"position\": \"{{userPosition}}\",\n    \"startTime\": \"{{userStartTime}}\",\n    \"endTime\": \"{{userEndTime}}\"\n  },\n  \"notes\": \"{{userNotes}}\",\n  \"isAdmin\": \"{{userIsAdmin}}\",\n  \"isActivated\": \"{{userIsActivated}}\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Should return 400 when Trying to add Contract Type Filled other than Employment, Mandate, B2B - PUT /users",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return 400 when Trying to add Contract Type Filled other than Employment, Mandate, B2B - PUT /users\", function () {",
													"    const resBody = pm.response.json();",
													"    ",
													"    pm.response.to.have.status(400);",
													"    pm.expect(resBody.message).to.eql('Invalid contract type. Allowed values: Employment, Mandate, B2B');",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"contract\": {\n    \"type\": \"randomType\"\n  }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/{{firstUserId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{firstUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete First Test User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/{{firstUserId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{firstUserId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Should return 400 when Trying to Add something Other than Date to birthDate Field - PUT /users/id",
							"item": [
								{
									"name": "Create First Test User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const resBody = pm.response.json();",
													"pm.collectionVariables.set(\"firstUserId\", resBody.id);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randId = Math.floor(Math.random() * 900000000) + 100000000;",
													"const userEmail = \"email_\" + randId + \"@postman.com\";",
													"pm.collectionVariables.set(\"userEmail\", userEmail);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{userName}}\",\n  \"surname\": \"{{userSurname}}\",\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{userPassword}}\",\n  \"phoneNumber\": \"{{userPhoneNumber}}\",\n  \"birthDate\": \"{{userBirthDate}}\",\n  \"contract\": {\n    \"type\": \"{{userContractType}}\",\n    \"salary\": \"{{userSalary}}\",\n    \"position\": \"{{userPosition}}\",\n    \"startTime\": \"{{userStartTime}}\",\n    \"endTime\": \"{{userEndTime}}\"\n  },\n  \"notes\": \"{{userNotes}}\",\n  \"isAdmin\": \"{{userIsAdmin}}\",\n  \"isActivated\": \"{{userIsActivated}}\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Should return 400 when Trying to Add something Other than Date to birthDate Field - PUT /users/id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return 400 when Trying to Add something Other than Date to birthDate Field - PUT /users/id\", function () {",
													"    const resBody = pm.response.json();",
													"    ",
													"    pm.response.to.have.status(400);",
													"    pm.expect(resBody.message).to.eql('Invalid date format');",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"birthDate\": \"somethingRandom\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/{{firstUserId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{firstUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete First Test User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/{{firstUserId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{firstUserId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Should return 400 when Trying to Add something Other than Date to startTime Field - PUT /users/id",
							"item": [
								{
									"name": "Create First Test User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const resBody = pm.response.json();",
													"pm.collectionVariables.set(\"firstUserId\", resBody.id);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randId = Math.floor(Math.random() * 900000000) + 100000000;",
													"const userEmail = \"email_\" + randId + \"@postman.com\";",
													"pm.collectionVariables.set(\"userEmail\", userEmail);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{userName}}\",\n  \"surname\": \"{{userSurname}}\",\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{userPassword}}\",\n  \"phoneNumber\": \"{{userPhoneNumber}}\",\n  \"birthDate\": \"{{userBirthDate}}\",\n  \"contract\": {\n    \"type\": \"{{userContractType}}\",\n    \"salary\": \"{{userSalary}}\",\n    \"position\": \"{{userPosition}}\",\n    \"startTime\": \"{{userStartTime}}\",\n    \"endTime\": \"{{userEndTime}}\"\n  },\n  \"notes\": \"{{userNotes}}\",\n  \"isAdmin\": \"{{userIsAdmin}}\",\n  \"isActivated\": \"{{userIsActivated}}\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Should return 400 when Trying to Add something Other than Date to startTime Field - PUT /users/id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return 400 when Trying to Add something Other than Date to startTime Field - PUT /users/id\", function () {",
													"    const resBody = pm.response.json();",
													"    ",
													"    pm.response.to.have.status(400);",
													"    pm.expect(resBody.message).to.eql('Invalid date format');",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"contract\": {\n    \"startTime\": \"somethingRandom\"\n  }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/{{firstUserId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{firstUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete First Test User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/{{firstUserId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{firstUserId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Should return 400 when Trying to Add something Other than Date to endTime Field - PUT /users/id",
							"item": [
								{
									"name": "Create First Test User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const resBody = pm.response.json();",
													"pm.collectionVariables.set(\"firstUserId\", resBody.id);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randId = Math.floor(Math.random() * 900000000) + 100000000;",
													"const userEmail = \"email_\" + randId + \"@postman.com\";",
													"pm.collectionVariables.set(\"userEmail\", userEmail);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{userName}}\",\n  \"surname\": \"{{userSurname}}\",\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{userPassword}}\",\n  \"phoneNumber\": \"{{userPhoneNumber}}\",\n  \"birthDate\": \"{{userBirthDate}}\",\n  \"contract\": {\n    \"type\": \"{{userContractType}}\",\n    \"salary\": \"{{userSalary}}\",\n    \"position\": \"{{userPosition}}\",\n    \"startTime\": \"{{userStartTime}}\",\n    \"endTime\": \"{{userEndTime}}\"\n  },\n  \"notes\": \"{{userNotes}}\",\n  \"isAdmin\": \"{{userIsAdmin}}\",\n  \"isActivated\": \"{{userIsActivated}}\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Should return 400 when Trying to Add something Other than Date to endTime Field - PUT /users/id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return 400 when Trying to Add something Other than Date to endTime Field - PUT /users/id\", function () {",
													"    const resBody = pm.response.json();",
													"    ",
													"    pm.response.to.have.status(400);",
													"    pm.expect(resBody.message).to.eql('Invalid date format');",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"contract\": {\n    \"endTime\": \"somethingRandom\"\n  }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/{{firstUserId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{firstUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete First Test User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/{{firstUserId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{firstUserId}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "DELETE /users/id",
					"item": [
						{
							"name": "Should return 401 when no Token - DELETE /users/id",
							"item": [
								{
									"name": "Create First Test User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const resBody = pm.response.json();",
													"pm.collectionVariables.set(\"firstUserId\", resBody.id);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randId = Math.floor(Math.random() * 900000000) + 100000000;",
													"const userEmail = \"email_\" + randId + \"@postman.com\";",
													"pm.collectionVariables.set(\"userEmail\", userEmail);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{userName}}\",\n  \"surname\": \"{{userSurname}}\",\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{userPassword}}\",\n  \"phoneNumber\": \"{{userPhoneNumber}}\",\n  \"birthDate\": \"{{userBirthDate}}\",\n  \"contract\": {\n    \"type\": \"{{userContractType}}\",\n    \"salary\": \"{{userSalary}}\",\n    \"position\": \"{{userPosition}}\",\n    \"startTime\": \"{{userStartTime}}\",\n    \"endTime\": \"{{userEndTime}}\"\n  },\n  \"notes\": \"{{userNotes}}\",\n  \"isAdmin\": \"{{userIsAdmin}}\",\n  \"isActivated\": \"{{userIsActivated}}\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Should return 401 when no Token - DELETE /users/id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return 401 when no Token - DELETE /users/id\", function () {",
													"    pm.response.to.have.status(401);",
													"    pm.response.to.have.body(\"Unauthorized\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/{{firstUserId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{firstUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete First Test User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/{{firstUserId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{firstUserId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Should return 403 as Not Admin User - DELETE /users/id",
							"item": [
								{
									"name": "Create First Test User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const resBody = pm.response.json();",
													"pm.collectionVariables.set(\"firstUserId\", resBody.id);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randId = Math.floor(Math.random() * 900000000) + 100000000;",
													"const userEmail = \"email_\" + randId + \"@postman.com\";",
													"pm.collectionVariables.set(\"userEmail\", userEmail);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{userName}}\",\n  \"surname\": \"{{userSurname}}\",\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{userPassword}}\",\n  \"phoneNumber\": \"{{userPhoneNumber}}\",\n  \"birthDate\": \"{{userBirthDate}}\",\n  \"contract\": {\n    \"type\": \"{{userContractType}}\",\n    \"salary\": \"{{userSalary}}\",\n    \"position\": \"{{userPosition}}\",\n    \"startTime\": \"{{userStartTime}}\",\n    \"endTime\": \"{{userEndTime}}\"\n  },\n  \"notes\": \"{{userNotes}}\",\n  \"isAdmin\": \"{{userIsAdmin}}\",\n  \"isActivated\": \"{{userIsActivated}}\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Should return 403 as Not Admin User - DELETE /users/id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return 403 as Not Admin User - DELETE /users/id\", function () {",
													"    const resBody = pm.response.json();",
													"    pm.response.to.have.status(403);",
													"    pm.expect(resBody.message).to.eql('Unauthorized: Only administrators can perform this action');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{notAdminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/{{firstUserId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{firstUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete First Test User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/{{firstUserId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{firstUserId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Should return 200 and Delete User as Admin User - DELETE /users/id",
							"item": [
								{
									"name": "Create First Test User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const resBody = pm.response.json();",
													"pm.collectionVariables.set(\"firstUserId\", resBody.id);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randId = Math.floor(Math.random() * 900000000) + 100000000;",
													"const userEmail = \"email_\" + randId + \"@postman.com\";",
													"pm.collectionVariables.set(\"userEmail\", userEmail);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{userName}}\",\n  \"surname\": \"{{userSurname}}\",\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{userPassword}}\",\n  \"phoneNumber\": \"{{userPhoneNumber}}\",\n  \"birthDate\": \"{{userBirthDate}}\",\n  \"contract\": {\n    \"type\": \"{{userContractType}}\",\n    \"salary\": \"{{userSalary}}\",\n    \"position\": \"{{userPosition}}\",\n    \"startTime\": \"{{userStartTime}}\",\n    \"endTime\": \"{{userEndTime}}\"\n  },\n  \"notes\": \"{{userNotes}}\",\n  \"isAdmin\": \"{{userIsAdmin}}\",\n  \"isActivated\": \"{{userIsActivated}}\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Should return 200 and Delete User as Admin User - DELETE /users/id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/{{firstUserId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{firstUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User Should Not be Found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return 200 and Delete User as Admin User - DELETE /users/id\", function () {",
													"    const resBody = pm.response.json();",
													"    pm.response.to.have.status(404);",
													"",
													"    const userId = pm.variables.get(\"firstUserId\");",
													"    pm.expect(resBody.message).to.eql(`User with id = ${userId} not found`);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/{{firstUserId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{firstUserId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Should return 404 when Id Not Found - DELETE /users/id",
							"item": [
								{
									"name": "Should return 404 when Id Not Found - DELETE /users/id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return 404 when Id Not Found - DELETE /users/id\", function () {",
													"    const resBody = pm.response.json();",
													"    pm.response.to.have.status(404);",
													"    pm.expect(resBody.message).to.eql('User with id = 666b5bfd8e3c464090cb69b8 not found');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/666b5bfd8e3c464090cb69b8",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"666b5bfd8e3c464090cb69b8"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Should return 400 when Invalid User Id Format - DELETE /users/id",
							"item": [
								{
									"name": "Should return 400 when Invalid User Id Format - DELETE /users/id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return 400 when Invalid User Id Format - DELETE /users/id\", function () {",
													"    const resBody = pm.response.json();",
													"    pm.response.to.have.status(400);",
													"    pm.expect(resBody.message).to.eql('Invalid user ID format');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{adminAuthToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/invalidUserIdFormat",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"invalidUserIdFormat"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://127.0.0.1:3050",
			"type": "string"
		},
		{
			"key": "apiTesterAdmin",
			"value": "apitesteradmin@tests.com",
			"type": "string"
		},
		{
			"key": "apiTesterNotAdmin",
			"value": "apitesternotadmin@tests.com",
			"type": "string"
		},
		{
			"key": "apiTesterDeactivated",
			"value": "apitesterdeactivated@tests.com",
			"type": "string"
		},
		{
			"key": "apiTesterNotExisting",
			"value": "apitesternotexisting@tests.com",
			"type": "string"
		},
		{
			"key": "password",
			"value": "chocolate",
			"type": "string"
		},
		{
			"key": "invalidAuthToken",
			"value": "Bearer invalidToken",
			"type": "string"
		},
		{
			"key": "adminAuthToken",
			"value": ""
		},
		{
			"key": "notAdminAuthToken",
			"value": ""
		},
		{
			"key": "userName",
			"value": ""
		},
		{
			"key": "userSurname",
			"value": ""
		},
		{
			"key": "userEmail",
			"value": ""
		},
		{
			"key": "userPassword",
			"value": ""
		},
		{
			"key": "userNotes",
			"value": ""
		},
		{
			"key": "userPhoneNumber",
			"value": ""
		},
		{
			"key": "userBirthDate",
			"value": ""
		},
		{
			"key": "userContractType",
			"value": ""
		},
		{
			"key": "userPosition",
			"value": ""
		},
		{
			"key": "userSalary",
			"value": ""
		},
		{
			"key": "userStartTime",
			"value": ""
		},
		{
			"key": "userEndTime",
			"value": ""
		},
		{
			"key": "userIsAdmin",
			"value": ""
		},
		{
			"key": "userIsActivated",
			"value": ""
		},
		{
			"key": "firstUserId",
			"value": ""
		},
		{
			"key": "secondUserId",
			"value": ""
		},
		{
			"key": "kutas",
			"value": ""
		}
	]
}